# 1. Squares of Numbers
squares = [x ** 2 for x in range(1, 11)]
print("Squares:", squares)
# `[x ** 2 for x in range(1, 11)]`:
#       This is a list comprehension that iterates through numbers from 1 to 10 (inclusive)
#       using `range(1, 11)`.
#       For each number `x`, it calculates its square (`x ** 2`) and adds it to the list.
#


# 2. Even Numbers
even_numbers = [x%2 for x in range(2, 21, 2)]
print("Even Numbers:", even_numbers)

# `[x for x in range(2, 21, 2)]`:
#       This is a list comprehension that iterates through numbers from 2 to 20 (inclusive)
#       with a step size of 2 (`range(2, 21, 2)`).
#       For each number `x`, it adds `x` to the list.



# 3. Words Length
words = ["apple", "banana", "orange", "strawberry"]
word_lengths = [len(word) for word in words]
print("Word Lengths:", word_lengths)

# 1. `len(word) for word in words`:
#       This is a list comprehension that iterates through each word in the `words` list.
#       For each word, it calculates its length using the `len()` function and
#       adds the length to the list.
# 2. `word_lengths = [... for ... in ...]`:
#       This line assigns the list comprehension to the variable `word_lengths`,
#       which contains the lengths of the words in the `words` list.
#



# 4. Vowels in a String
string = "hello world"
vowels_count = sum(1 for char in string if char in 'aeiou')
print("Vowels Count:", vowels_count)

## Study Drills
# 1. Count Consonents
# 2. Count Words in a string


## OR

string = "hello world"
vowels_count = sum(1 if char in 'aeiou' else 0 for char in string)
print("Vowels Count:", vowels_count)


# `1 for char in string if char in 'aeiou'`:
#       This is a generator expression.
#       It iterates through each character in the `string` variable.
#       For each character (`char`), it checks if it's a vowel (contained in the string `'aeiou'`).
#       If it is, it yields `1`; otherwise, it yields `0`.

# 2. `sum(...)`:
#       This function sums up all the values yielded by the generator expression.
#       Since the generator expression yields `1` for each vowel in the string and `0`
#       for each non-vowel, the `sum()` function effectively counts the number of vowels
#       in the string.




# 5. Prime Numbers
prime_numbers = [x for x in range(2, 51) if all(x % i != 0 for i in range(2, int(x**0.5) + 1))]
print("Prime Numbers:", prime_numbers)

# 1. `prime_numbers = [...]`:
#     This initializes the `prime_numbers` list where prime numbers will be stored.
# 2. `[x for x in range(2, 51) if ...]`:
#     This is a list comprehension that iterates over each number `x` in the range
#     from 2 to 50 (inclusive).
# 3. `x % i != 0 for i in range(2, int(x**0.5) + 1)`:
#     This part is a generator expression inside the `all()` function.
#     It generates a sequence of Boolean values indicating
#     whether `x` is not divisible by any number from 2 to the square root of `x` (inclusive).
#       - For each `i` in the range from 2 to the square root of `x`,
#         it checks if `x` is not divisible by `i` (`x % i != 0`).
#       - If `x` is not divisible by any of these numbers,
#         it returns `True`; otherwise, it returns `False`.
#       - The `all()` function checks if all the values generated by
#         the generator expression are `True`.
#         If they are, it returns `True`; otherwise, it returns `False`.
# 4. The list comprehension only includes `x` in the `prime_numbers` list if all the values generated by the generator expression are `True`, meaning `x` is not divisible by any number from 2 to its square root. This effectively filters out composite numbers, leaving only prime numbers in the `prime_numbers` list.


# 6. Matrix Transpose
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
transpose = [[row[i] for row in matrix] for i in range(len(matrix[0]))]
print("Matrix Transpose:", transpose)

# This Python code calculates the transpose of a matrix using a nested list comprehension.
# Here's a breakdown:
# `[[row[i] for row in matrix] for i in range(len(matrix[0]))]`:
#    - This is a nested list comprehension.
#      It iterates over each column index `i` in the range from 0 to the length of
#      the first row of the matrix (i.e., the number of columns).
#    - For each column index `i`,
#      it iterates over each row in the matrix using `for row in matrix`.
#    - It extracts the element at index `i` from each row (`row[i]`),
#      effectively transposing rows and columns.
#    - It creates a new list containing these elements,
#      forming a column in the transpose of the matrix.
#
# `transpose = [...]`:
#    - This line assigns the result of the nested list comprehension to
#      the variable `transpose`, representing the transpose of the original matrix.
#


# 7. Odd or Even List
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
odd_even_list = ['Odd' if x % 2 != 0 else 'Even' for x in numbers]
print("Odd or Even List:", odd_even_list)


# `[... for x in numbers]`:
#       This is a list comprehension that iterates over each number `x` in the `numbers` list.
#
# `'Odd' if x % 2 != 0 else 'Even'`:
#       This is a ternary conditional expression inside the list comprehension.
#       It checks if the current number `x` is odd or even:
#       - If `x % 2 != 0` evaluates to `True`,
#         it means `x` is odd, so 'Odd' is appended to the list.
#       - If `x % 2 != 0` evaluates to `False`,
#         it means `x` is even, so 'Even' is appended to the list.
# `odd_even_list = [...]`: This line assigns the list generated by the list comprehension to the variable `odd_even_list`.




# 8. FizzBuzz
fizzbuzz = ['FizzBuzz' if x % 3 == 0 and x % 5 == 0 else 'Fizz' if x % 3 == 0 else 'Buzz' if x % 5 == 0 else x for x in range(1, 101)]
print("FizzBuzz:", fizzbuzz)


# `[... for x in range(1, 101)]`:
#       This is a list comprehension that iterates over each number `x`
#       in the range from 1 to 100.
#
# `'FizzBuzz' if x % 3 == 0 and x % 5 == 0 else ...`:
#       This is a ternary conditional expression inside the list comprehension.
#       - It checks if the current number `x` is divisible by both 3 and 5:
#           If `x` is divisible by both 3 and 5 (`x % 3 == 0 and x % 5 == 0`),
#           'FizzBuzz' is appended to the list.
#       - If not, it checks if `x` is divisible by 3 (`x % 3 == 0`):
#           If `x` is divisible by 3, 'Fizz' is appended to the list.
#       - If not, it checks if `x` is divisible by 5 (`x % 5 == 0`):
#           If `x` is divisible by 5, 'Buzz' is appended to the list.
#       - If none of the above conditions are met, it appends `x` itself to the list.
#
# 3. `fizzbuzz = [...]`: This line assigns the list generated by the list comprehension to the variable `fizzbuzz`.




# 9. Capitalize Words
words = ["hello", "world", "python", "programming"]
capitalized_words = [word.capitalize() for word in words]
print("Capitalized Words:", capitalized_words)

# `[word.capitalize() for word in words]`:
#       This is a list comprehension that iterates over each word `word` in the `words` list.
# `word.capitalize()`:
#       This method capitalizes the first letter of each word in the list.
#       If the word contains any characters other than the first one,
#       they are converted to lowercase.
# `capitalized_words = [...]`:
#       This line assigns the list generated by the list comprehension to the variable
#       `capitalized_words`.



# 10. Flatten a Nested List
nested_list = [[1, 2, 3], [4, 5], [6, 7, 8]]
flattened_list = [item for sublist in nested_list for item in sublist]
print("Flattened List:", flattened_list)


#`[item for sublist in nested_list for item in sublist]`:
#       This is a nested list comprehension.
#       It iterates over each sublist (`sublist`) in the `nested_list`.
#       - For each `sublist`, it iterates over each `item` in that sublist.
#       - It appends each `item` to the `flattened_list`.
#`flattened_list = [...]`:
#       This line assigns the list generated by the list comprehension to the variable
#       `flattened_list`.



