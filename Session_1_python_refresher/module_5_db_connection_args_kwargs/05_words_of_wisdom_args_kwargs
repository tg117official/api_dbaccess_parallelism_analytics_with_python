In Python, arguments can be passed to functions in various ways, each serving different purposes.
Here, we'll explore three main types: regular arguments, *args, and **kwargs. I'll provide you with a
script that demonstrates each and explain their differences, typical uses, and scenarios where they might
be particularly useful.

1. Regular Arguments
        Regular arguments are the most common type and are passed to functions in the exact order the
        parameters are defined.

2. *args
        The *args parameter allows a function to accept any number of positional arguments (i.e., arguments
        that are not keyword/named arguments). These extra arguments are treated as a tuple inside the
        function.

3. **kwargs
        The **kwargs parameter allows a function to accept any number of keyword arguments (i.e., arguments
        specified by name). These are treated as a dictionary inside the function, where the keys are the
        argument names and the values are the argument values.

Usage and Scenarios : 

1. Regular Arguments:
        Usage: When the number of arguments and their meaning are fixed and known ahead of time.
        Scenario: A function that takes exactly two parameters, like coordinates (x, y).

2. *args:
        Usage: When the number of positional arguments can vary, and you want to handle them as a sequence.
        Scenario: A function that needs to accept a varying number of inputs, like a sum function that can
        take any number of numbers.

3. **kwargs:
        Usage: When you want to accept any number of keyword arguments for flexible configurations or options.
        Scenario: A function that initializes an object where many different properties might be set, like
        creating a user profile where optional attributes can vary (like age, gender, location).