In Python, there are mainly three types of loops: "for" loop, "while" loop, and "nested" loop. Let's explore the differences between them:

1. For Loop:
    - Syntax:
        The "for" loop in Python is used to iterate over a sequence
        (such as a list, tuple, string, or range) or any other iterable object.
    - Iteration:
        It iterates over each element of the sequence or iterable,
        executing the block of code once for each element.
    - Initialization and Incrementation:
        The loop variable is automatically initialized
        and incremented based on the elements in the sequence.
    - Example :

     fruits = ["apple", "banana", "cherry"]
     for fruit in fruits:
         print(fruit)


2. While Loop:
   - Syntax:
        The "while" loop in Python is used to repeatedly execute a block of code
        as long as a specified condition is true.
   - Iteration:
        It continues iterating as long as the condition remains true.
   - Initialization and Incrementation:
        You need to explicitly initialize any variables before the loop
        and update them within the loop to avoid an infinite loop.
   - Example :

     count = 0
     while count < 5:
         print(count)
         count += 1


3. Nested Loop:
   - Syntax:
        Nested loops in Python are loops within loops.
   - Iteration:
        They allow for more complex iterations,
        where one loop is contained within another loop.
   - Initialization and Incrementation:
        Each nested loop has its own initialization and incrementation,
        and they can operate independently of each other.
   - Example:

     for i in range(3):
         for j in range(2):
             print(i, j)


Key Differences:
- For loops are used when you know the number of iterations in advance,
  such as iterating over a sequence.
- While loops are used when you want to repeat a block of code
  until a condition becomes false.
- Nested loops are used when you need to perform iterations within iterations,
  such as iterating over a 2D grid or nested data structures.

Selecting the type of loop for your work :

For Loop:
    For loops are generally more concise and readable,
    especially when iterating over sequences.

    They are preferred when the number of iterations is known in advance,
    as they directly iterate over the elements of a sequence.


While Loop:
    While loops are more flexible and can handle more complex looping conditions.

    However, they require additional care to ensure termination
    and may be less readable in some cases.

    They are preferred when the looping condition depends on dynamic factors
    that cannot be expressed easily in terms of a sequence.


Is there any performance impact for type of loop :
    Performance-wise, for loops are slightly faster than while loops.

    However, the choice between them often comes down to
    readability and the specific requirements of the problem.

    In some cases, using a for loop may be more efficient
    because it directly iterates over a sequence,
    while in others, a while loop may be necessary for its flexibility in handling
    dynamic conditions.

    you can evaluate timing for loops using
    %timeit for_loop(range(1000))
    %timeit while_loop(range(1000))

